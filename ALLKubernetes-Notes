ubernetes Notes:

# kubectl get nodes

Scenario1: Creation of Pod definition file

 	# mkdir mynewfiles
	#cd mynewfiles
	# ls
	# vim pod-definition1.yml
		i
---
apiVersion: v1
kind: Pod
metadata:
 name: nginx-pod
 labels:
  type: reverse-proxy
  author: edureka
spec:
 containers:
  - name: mynginx
    image: nginx

# kubectl get pods   
 
// pod will be ready and running

	# kubectl get pods -o wide 

 // will give more information about pods with name of slave on which pod is available.
	
	# kubectl get nodes -o wide
  
  
  Create replica Set
*******************************************

kubectl delete -f pod-definition1.yml
kubectl delete -f pod-definition2.yml
kubectl get pods
	# vim rc-definition.yml
		i

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: tomcat-rc
 labels:
  author: edureka
  type: webserver
spec:
 replicas: 3
 selector:
  matchLabels:
   type: webserver
 template:
  metadata:
   name: tomcat-pod
   labels:
    type: webserver
  spec:
   containers:
    - name: mytomcat
      image: tomcat
      ports:
       - containerPort: 8080
         hostPort: 9090

# kubectl get pods 
# kubectl get pods -o wide
# kubectl get all

*************************************************
Scaling of Pods using replica set

Method1:

Open the replica set  and change replicas to 5

save the file

execute this command:

	# kubectl replace -f rc-definition.yml


	# kubectl get pods

now desired replicas of tomcat will be running


Method2: direct command

increase or decrese the replica count by using this command

	# kubectl scale --replicas=2 -f rc-definition.yml

	# kubectl get pods

//only 2 pods will be running now


For opening desired ports:
gcloud compute firewall-rules create rule1 --allow tcp:8080
gcloud compute firewall-rules create rule1 --allow tcp:9090
gcloud compute firewall-rules create rule1 --allow tcp:30008


Create nodeport service object

	# vim myservice.yml
	i
---
apiVersion: v1
kind: Service
metadata:
 name: jenkins-service
spec:
 type: NodePort
 ports:
  - targetPort: 8080
    port: 8080
    nodePort: 30008
 selector:
  type: webserver
  
  
# kubectl create -f myservice.yml
        # kubcectl get pods
	# kubectl get pods -o wide
	# kubectl get nodes -o wide
	# kubectl get all  // will give port information

go to browser with an ip:30008


*****************************************

HPA:

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      name: nginxpod
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          resources:
            limits:
              cpu: 10m

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  type: ClusterIP  ## this is default if we do not type in service definition
  selector:
    app: nginx
  ports:
   - protocol: TCP
     port: 80
     targetPort: 80

---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 5
  
  
  kubectl create -f hpa.yaml
  
  Generate load:

kubectl run -i --tty load-generator --rm --image=busybox --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://serviceIP:portnumber; done"

******************************************


PV:

apiVersion: v1
kind: PersistentVolume
metadata:
 name: block-pv
spec:
 storageClassName: manual
 capacity: 
  storage: 1Gi
 accessModes:
  - ReadWriteOnce
 hostPath:
  path: /tmp/data

kubectl create -f pv.yml

PVC

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: pvc
spec:
 storageClassName: manual
 accessModes:
  - ReadWriteOnce
 resources:
  requests:
   storage: 1Gi
   
   POD:
   
   apiVersion: v1
kind: Pod
metadata:
 name: pod-pvc
spec:
 containers:
  - image: nginx
    name: c1
    volumeMounts:
     - mountPath: "/data"
       name: my-volume
 volumes:
  - name: my-volume
    persistentVolumeClaim:
     claimName: pvc
     
     
     refer: https://github.com/Sonal0409/DevOps_ClassNotes/tree/master/Kubernetese/PersistentVolume
     
     ********************************************
     
     HELM
     
     
Helm install

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh

# Use GKE
helm repo add bitnami https://charts.bitnami.com/bitnami
 helm install my-release bitnami/jenkins
helm list
#Wait for 2 mins to see Jenkins UP
kubectl get deploy
kubectl get pods
kubectl get svc

#check the NodePort and access the app with Node IP







**************************

 # vim dev.properties
app.env:dev
app.mem=2048m
app.properties=dev.env.url
:wq!

# kubectl create configmap dev-config1 --from-file=dev.properties
# kubectl get configmap
# kubectl get configmap dev-config1 -o yaml

Use configmap for a pod

vim pod-configmap.yml

kind: Pod
apiVersion: v1
metadata:
 name: pod-configmap
spec:
 containers:
  - image: nginx
    name: c1
    volumeMounts:
     - name: config-volume
       mountPath: /etc/config
 volumes:
  - name: config-volume
    configMap:
     name: dev-config1
 restartPolicy: Never
 
 :wq!
 
 # kubectl apply -f pod-configmap.yml
 # kubectl exec -it pod-configmap bash
 # cd /etc/config
 
 you will find the dev.properties file and configurations
 
 Edit the configMAP
 
 kubectl edit configmap -n <namespace> <configMapName> -o yaml

This opens up a vim editor with the configmap in yaml format. Now simply edit it and save it.


Refer the repo for more kubernetes concepts: https://github.com/Sonal0409/DevOps_ClassNotes/tree/master/Kubernetese



